module_name: Vertiq IO
serial_config:
    - command: vertiq_io telemetry ${SERIAL_DEV}
      port_config_param:
        name: VERTIQ_IO_CFG
        group: Vertiq IO

actuator_output:
  output_groups:
    - param_prefix: VERTIQ_IO
      group_label: 'ESCs'
      channel_label: 'ESC'
      standard_params:
        min: { min: 0, max: 65535, default: 1 }
        max: { min: 0, max: 65535, default: 65535 }
        failsafe: { min: 0, max: 500 }
      num_channels: 16

parameters:
    - group: Vertiq IO
      definitions:
        VERTIQ_BAUD:
            description:
                short: The IQUART driver's baud rate
                long: |
                    The baud rate (in bits per second) used by the serial port connected with IQUART communication
            type: int32
            default: 115200
            reboot_required: true
        VERTIQ_NUM_CVS:
            description:
              short: The number of Vertiq IFCI parameters to use
              long: |
                  The total number of IFCI control variables being used across all connected modules
            type: int32
            default: 0
            min: 0
            max: 16
            reboot_required: true
        VERTIQ_TEL_MSK:
            description:
              short: Motor telemetry bitmask
              long: |
                  Determines which modules the flight controller will ask for telemetry. Each position in the bitmask represents a Module ID. For example, setting bit
                  0 means that the flight controller will request telemetry from Modlue ID 0.
            type: int32
            default: 0
            min: 0
            max: 65535
            reboot_required: true
        DISARM_BEHAVE:
            description:
                short: The triggered behavior on PX4 disarm
                long: |
                    The behavior triggered when the flight controller disarms. You have the option to trigger your motors' disarm behaviors, set all motors to coast,
                    or set a predefined throttle setpoint
            type: enum
            values:
                0: Trigger Motor Disarm Behavior
                1: Coast Motors
                2: Set Predefined Setpoint
            default: 0
        DISARM_THROTTLE:
            description:
                short: The throttle value sent to the motors when DISARM_BEHAVE is set to Set Predefined Setpoint
                long: This is the throttle that will be sent to all motors when PX4 is disarmed and DISARM_BEHAVE is Set Predefined Setpoint
            type: int32
            default: 0
            min: 0
            max: 65535
        ARMING_BEHAVE:
            description:
                short: The triggered behavior on PX4 arm
                long: |
                    The behavior triggered when the flight controller arms. You have the option to use your motors' arming behaviors, or to force all of your motors to arm
            type: enum
            values:
                0: Use Motor Arm Behavior
                1: Force Arming
            default: 0
        TARGET_MODULE_ID:
            description:
                short: The Module ID of the module you would like to communicate with
                long: |
                    This is the value used as Object ID to instantiate the Vertiq C++ API objects in the project.
                    This value should be set to the Module ID of the module you would like to communicate with.
            type: int32
            reboot_required: true
        TRIGGER_READ:
            description:
                short: Trigger a reinitialization of the connected module's values into the PX4 parameters
                long: |
                    Setting this value to true will reinitialize PX4's IQUART connected parameters to the value stored on the currently targeted motor.
                    This is especially useful if your flight controller powered on before your connected modules
            type: boolean
        THROTTLE_CVI:
            description:
                short: Module Param - The module's Throttle Control Value Index
                long: |
                    This represents the Control Value Index where the targeted module will look for throttle commands
            type: int32
            min: 0
            max: 16
        CONTROL_MODE:
            description:
                short: Module Param - The module's control mechanism, PWM, Voltage, or Velocity Commands
                long: |
                    PWM Mode: Commands a fraction of battery voltage. This changes as the battery voltage changes.
                    This is the least safe mode because the upper throttle limit is determined by the battery voltage.
                    Voltage Mode: Commands a voltage. The motor will behave the same way throughout the life of a battery, assuming the commanded voltage is less than the battery voltage.
                    You must set the MAX_VOLTS parameter. Velocity Mode: Closed-loop, commands a velocity. The controller will adjust
                    the applied voltage so that the motor spins at the commanded velocity. This mode has faster reaction times. Only use this if you know the properties of your propeller.
                    You must set the MAX_VELOCITY parameter.
            type: enum
            values:
                0: PWM
                1: Voltage
                2: Velocity
        MAX_VELOCITY:
            description:
                short: Module Param - The maximum internally commanded velocity when CONTROL_MODE is set to Velocity
                long: |
                    Only relevant in Velocity Mode. This is the velocity the controller will command at full throttle.
            type: float
        MAX_VOLTS:
            description:
                short: Module Param - The maximum internally commanded voltage when CONTROL_MODE is set to Voltage
                long: |
                    Only relevant in Voltage Mode. This is the voltage the controller will command at full throttle.
            type: float
        VERTIQ_MOTOR_DIR:
            description:
                short: Module Param - The direction that the module should spin
                long: |
                    Set the targeted motor's spinning direction (clockwise vs. counter clockwise) and flight mode (2D non-reversible vs. 3D reversible)
            type: enum
            values:
                0: Unconfigured
                1: 3D Counter Clockwise
                2: 3D Clockwise
                3: 2D Counter Clockwise
                4: 2D Clockwise
        VERTIQ_FC_DIR:
            description:
                short: Module Param - Determine whether the flight controller is configured for 2D or 3D communication
                long: |
                    The FC and the ESC must agree upon the meaning of the signal coming out of the ESC. When FCs are in 3D mode
                    they re-map negative signals. This parameter keeps the FC and ESC in agreement.
            type: enum
            values:
                0: 2D
                1: 3D
        ZERO_ANGLE:
            description:
                short: Module Param - The encoder angle at which theta is zero.
                long: |
                    The encoder angle at which theta is zero. Adjust this number to change the location of 0 phase when pulsing.
            type: float
        VELOCITY_CUTOFF:
            description:
                short: Module Param - The minimum velocity required to allow pulsing.
                long: |
                    This is the velocity at which pulsing is allowed. Any velocity between VELOCITY_CUTOFF and -VELOCITY_CUTOFF will not pulse.
            type: float
        TORQUE_OFF_ANGLE:
            description:
                short: Module Param - This offsets where the pulse starts around the motor to allow for propeller mechanical properties.
                long: |
                    This offsets where the pulse starts around the motor to allow for propeller mechanical properties.
            type: float
        PULSE_VOLT_MODE:
            description:
                short: Module Param - 0 = Supply Voltage Mode, 1 = Voltage Limit Mode
                long: |
                    Supply Voltage Mode means that the maximum voltage applied to pulsing is the supplied voltage. Voltage Limit Mode
                    indicates that PULSE_VOLT_LIM is the maximum allowed voltage to apply towards pulsing.
            type: enum
            values:
                0: Supply Voltage Mode
                1: Voltage Limit Mode
        PULSE_VOLT_LIM:
            description:
                short: Module Param - This sets the max pulsing voltage limit when in Voltage Limit Mode.
                long: |
                    This sets the max pulsing voltage limit when in Voltage Limit Mode.
            type: float
        X_CVI:
            description:
                short: Module Param - The control value index value for the X rectangular coordinate.
                long: |
                    This represents the Control Value Index where the targeted module will look for the X rectangular coordinate.
            type: int32
            min: 0
            max: 16
        Y_CVI:
            description:
                short: Module Param - The control value index value for the Y rectangular coordinate.
                long: |
                    This represents the Control Value Index where the targeted module will look for the Y rectangular coordinate.
            type: int32
            min: 0
            max: 16
